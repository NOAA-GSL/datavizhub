{
  "acquire http": {
    "description": "datavizhub acquire http",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--output",
          "--list",
          "--pattern",
          "--since",
          "--since-period",
          "--until",
          "--date-format",
          "--inputs",
          "--manifest",
          "--output-dir"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path",
        "default": "-"
      },
      "--list": {
        "help": "List links on a directory page",
        "type": "str",
        "default": false
      },
      "--pattern": "Regex to filter listed links",
      "--since": "ISO date filter for list mode",
      "--since-period": "ISO-8601 duration for lookback (e.g., P1Y, P6M, P7D, PT24H)",
      "--until": "ISO date filter for list mode",
      "--date-format": "Filename date format for list filtering (e.g., YYYYMMDD)",
      "--inputs": {
        "help": "Multiple HTTP URLs to fetch",
        "path_arg": true,
        "type": "path"
      },
      "--manifest": {
        "help": "Path to a file listing URLs (one per line)",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "acquire s3": {
    "description": "datavizhub acquire s3",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--url",
          "--bucket",
          "--key",
          "--unsigned",
          "--list",
          "--pattern",
          "--since",
          "--since-period",
          "--until",
          "--date-format",
          "--inputs",
          "--manifest",
          "--output-dir",
          "--output"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--url": "Full URL s3://bucket/key",
      "--bucket": "Bucket name",
      "--key": "Object key (when using --bucket)",
      "--unsigned": {
        "help": "Use unsigned access for public buckets",
        "type": "str",
        "default": false
      },
      "--list": {
        "help": "List keys under a prefix",
        "type": "str",
        "default": false
      },
      "--pattern": "Regex to filter listed keys",
      "--since": "ISO date filter for list mode",
      "--since-period": "ISO-8601 duration for lookback (e.g., P1Y, P6M, P7D, PT24H)",
      "--until": "ISO date filter for list mode",
      "--date-format": "Filename date format for list filtering (e.g., YYYYMMDD)",
      "--inputs": {
        "help": "Multiple s3:// URLs to fetch",
        "path_arg": true,
        "type": "path"
      },
      "--manifest": {
        "help": "Path to a file listing s3:// URLs (one per line)",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      },
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path",
        "default": "-"
      }
    }
  },
  "acquire ftp": {
    "description": "datavizhub acquire ftp",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--output",
          "--list",
          "--sync-dir",
          "--pattern",
          "--since",
          "--since-period",
          "--until",
          "--date-format",
          "--inputs",
          "--manifest",
          "--output-dir"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path",
        "default": "-"
      },
      "--list": {
        "help": "List files in an FTP directory",
        "type": "str",
        "default": false
      },
      "--sync-dir": "Sync FTP directory to a local directory",
      "--pattern": "Regex to filter list/sync",
      "--since": "ISO date filter for list/sync",
      "--since-period": "ISO-8601 duration for lookback (e.g., P1Y, P6M, P7D, PT24H)",
      "--until": "ISO date filter for list/sync",
      "--date-format": "Filename date format for filtering (e.g., YYYYMMDD)",
      "--inputs": {
        "help": "Multiple FTP paths to fetch",
        "path_arg": true,
        "type": "path"
      },
      "--manifest": {
        "help": "Path to a file listing FTP paths (one per line)",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "acquire vimeo": {
    "description": "datavizhub acquire vimeo",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--output"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path",
        "default": "-"
      }
    }
  },
  "process decode-grib2": {
    "description": "datavizhub process decode-grib2",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--backend",
          "--pattern",
          "--unsigned",
          "--raw"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--backend": {
        "help": "",
        "choices": [
          "cfgrib",
          "pygrib",
          "wgrib2"
        ],
        "type": "str",
        "default": "cfgrib"
      },
      "--pattern": "Regex for .idx-based subsetting when using HTTP/S3",
      "--unsigned": {
        "help": "Use unsigned S3 access for public buckets",
        "type": "str",
        "default": false
      },
      "--raw": {
        "help": "Emit raw (optionally .idx-subset) GRIB2 bytes to stdout",
        "type": "str",
        "default": false
      }
    }
  },
  "process extract-variable": {
    "description": "datavizhub process extract-variable",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--backend",
          "--stdout",
          "--format"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--backend": {
        "help": "",
        "choices": [
          "xarray",
          "pygrib"
        ],
        "type": "str",
        "default": "xarray"
      },
      "--stdout": {
        "help": "Write selected variable as bytes to stdout",
        "type": "str",
        "default": false
      },
      "--format": {
        "help": "Output format for --stdout",
        "choices": [
          "npy",
          "nc",
          "grib2"
        ],
        "type": "str",
        "default": "npy"
      }
    }
  },
  "process convert-format": {
    "description": "datavizhub process convert-format",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--output",
          "--stdout",
          "--inputs",
          "--output-dir",
          "--backend",
          "--var",
          "--pattern",
          "--unsigned"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--output": {
        "help": "",
        "path_arg": true,
        "type": "path"
      },
      "--stdout": {
        "help": "Write binary output to stdout instead of a file",
        "type": "str",
        "default": false
      },
      "--inputs": {
        "help": "Multiple input paths or URLs",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      },
      "--backend": {
        "help": "",
        "choices": [
          "xarray",
          "pygrib",
          "pydap"
        ],
        "type": "str",
        "default": "xarray"
      },
      "--var": "Variable name or regex for multi-var datasets",
      "--pattern": "Regex for .idx-based subsetting when using HTTP/S3",
      "--unsigned": {
        "help": "Use unsigned S3 access for public buckets",
        "type": "str",
        "default": false
      }
    }
  },
  "visualize heatmap": {
    "description": "datavizhub visualize heatmap",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--var",
          "--basemap",
          "--extent",
          "--output",
          "--inputs",
          "--output-dir",
          "--width",
          "--height",
          "--dpi",
          "--cmap",
          "--colorbar",
          "--label",
          "--units",
          "--features",
          "--xarray-engine",
          "--map-type",
          "--tile-source",
          "--tile-zoom",
          "--timestamp",
          "--crs",
          "--reproject",
          "--timestamp-loc",
          "--no-coastline",
          "--no-borders",
          "--no-gridlines"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Path to .nc or .npy input",
        "path_arg": true,
        "type": "path"
      },
      "--var": "Variable name for NetCDF inputs",
      "--basemap": {
        "help": "Path to background image",
        "path_arg": true,
        "type": "path"
      },
      "--extent": "west east south north",
      "--output": {
        "help": "Output PNG path (required when using --input; for --inputs use --output-dir)",
        "path_arg": true,
        "type": "path"
      },
      "--inputs": {
        "help": "Multiple input paths for batch rendering",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      },
      "--width": "",
      "--height": "",
      "--dpi": "",
      "--cmap": "",
      "--colorbar": "",
      "--label": "",
      "--units": "",
      "--features": "Comma-separated features: coastline,borders,gridlines",
      "--xarray-engine": "xarray engine for NetCDF inputs (e.g., netcdf4, h5netcdf, scipy)",
      "--map-type": "Basemap type: image (default) or tile",
      "--tile-source": "Contextily tile source name or URL (when --map-type=tile)",
      "--tile-zoom": "Tile source zoom level",
      "--timestamp": "Overlay timestamp string",
      "--crs": "Force input CRS (e.g., EPSG:3857)",
      "--reproject": "Attempt reprojection to EPSG:4326 (limited support)",
      "--timestamp-loc": "Timestamp placement (axes-relative)",
      "--no-coastline": "",
      "--no-borders": "",
      "--no-gridlines": ""
    }
  },
  "visualize contour": {
    "description": "datavizhub visualize contour",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--inputs",
          "--output-dir",
          "--var",
          "--basemap",
          "--extent",
          "--output",
          "--width",
          "--height",
          "--dpi",
          "--cmap",
          "--filled",
          "--levels",
          "--colorbar",
          "--label",
          "--units",
          "--features",
          "--xarray-engine",
          "--map-type",
          "--tile-source",
          "--tile-zoom",
          "--timestamp",
          "--crs",
          "--reproject",
          "--timestamp-loc",
          "--no-coastline",
          "--no-borders",
          "--no-gridlines"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Path to .nc or .npy input",
        "path_arg": true,
        "type": "path"
      },
      "--inputs": {
        "help": "Multiple inputs for batch rendering",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      },
      "--var": "Variable name for NetCDF inputs",
      "--basemap": {
        "help": "Path to background image",
        "path_arg": true,
        "type": "path"
      },
      "--extent": "west east south north",
      "--output": {
        "help": "Output PNG path (required for single --input; when using --inputs, prefer --output-dir)",
        "path_arg": true,
        "type": "path"
      },
      "--width": "",
      "--height": "",
      "--dpi": "",
      "--cmap": "",
      "--filled": "Use filled contours",
      "--levels": "Count or comma-separated levels",
      "--colorbar": "",
      "--label": "",
      "--units": "",
      "--features": "Comma-separated features: coastline,borders,gridlines",
      "--xarray-engine": "xarray engine for NetCDF inputs (e.g., netcdf4, h5netcdf, scipy)",
      "--map-type": "",
      "--tile-source": "Contextily tile source (when --map-type=tile)",
      "--tile-zoom": "",
      "--timestamp": "Overlay timestamp string",
      "--crs": "Force input CRS (e.g., EPSG:3857)",
      "--reproject": "",
      "--timestamp-loc": "Timestamp placement (axes-relative)",
      "--no-coastline": "",
      "--no-borders": "",
      "--no-gridlines": ""
    }
  },
  "visualize timeseries": {
    "description": "datavizhub visualize timeseries",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--x",
          "--y",
          "--var",
          "--output",
          "--width",
          "--height",
          "--dpi",
          "--title",
          "--xlabel",
          "--ylabel",
          "--style"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Path to .csv or .nc input",
        "path_arg": true,
        "type": "path"
      },
      "--x": "CSV: X column name (e.g., time)",
      "--y": "CSV: Y column name (value)",
      "--var": "NetCDF: variable name to plot",
      "--output": {
        "help": "Output PNG path",
        "path_arg": true,
        "type": "path"
      },
      "--width": "",
      "--height": "",
      "--dpi": "",
      "--title": "",
      "--xlabel": "",
      "--ylabel": "",
      "--style": ""
    }
  },
  "visualize vector": {
    "description": "datavizhub visualize vector",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--inputs",
          "--output-dir",
          "--uvar",
          "--vvar",
          "--u",
          "--v",
          "--basemap",
          "--extent",
          "--output",
          "--width",
          "--height",
          "--dpi",
          "--density",
          "--scale",
          "--color",
          "--features",
          "--xarray-engine",
          "--map-type",
          "--tile-source",
          "--tile-zoom",
          "--streamlines",
          "--crs",
          "--reproject",
          "--no-coastline",
          "--no-borders",
          "--no-gridlines"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Path to .nc input (alternative to --u/--v .npy)",
        "path_arg": true,
        "type": "path"
      },
      "--inputs": {
        "help": "Multiple inputs for batch rendering",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write outputs for --inputs",
        "path_arg": true,
        "type": "path"
      },
      "--uvar": "NetCDF: U variable name",
      "--vvar": "NetCDF: V variable name",
      "--u": {
        "help": "Path to U .npy file (alternative input)",
        "path_arg": true,
        "type": "path"
      },
      "--v": {
        "help": "Path to V .npy file (alternative input)",
        "path_arg": true,
        "type": "path"
      },
      "--basemap": {
        "help": "Path to background image",
        "path_arg": true,
        "type": "path"
      },
      "--extent": "west east south north",
      "--output": {
        "help": "Output PNG path (required for single --input/--u/--v; when using --inputs, prefer --output-dir)",
        "path_arg": true,
        "type": "path"
      },
      "--width": "",
      "--height": "",
      "--dpi": "",
      "--density": "Arrow sampling density (0<d<=1)",
      "--scale": "Quiver scale controlling arrow length",
      "--color": "Arrow color",
      "--features": "Comma-separated features: coastline,borders,gridlines",
      "--xarray-engine": "xarray engine for NetCDF inputs (e.g., netcdf4, h5netcdf, scipy)",
      "--map-type": "",
      "--tile-source": "Contextily tile source (when --map-type=tile)",
      "--tile-zoom": "",
      "--streamlines": "Render streamlines instead of quiver",
      "--crs": "Force input CRS (e.g., EPSG:3857)",
      "--reproject": "",
      "--no-coastline": "",
      "--no-borders": "",
      "--no-gridlines": ""
    }
  },
  "visualize animate": {
    "description": "datavizhub visualize animate",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--mode",
          "--input",
          "--inputs",
          "--var",
          "--uvar",
          "--vvar",
          "--u",
          "--v",
          "--output-dir",
          "--manifest",
          "--cmap",
          "--levels",
          "--vmin",
          "--vmax",
          "--basemap",
          "--extent",
          "--width",
          "--height",
          "--dpi",
          "--density",
          "--scale",
          "--color",
          "--colorbar",
          "--label",
          "--units",
          "--show-timestamp",
          "--timestamps-csv",
          "--timestamp-loc",
          "--features",
          "--map-type",
          "--tile-source",
          "--tile-zoom",
          "--xarray-engine",
          "--no-coastline",
          "--no-borders",
          "--no-gridlines",
          "--seed",
          "--particles",
          "--custom-seed",
          "--dt",
          "--steps-per-frame",
          "--size",
          "--method",
          "--crs",
          "--reproject",
          "--to-video",
          "--combine-to",
          "--grid-cols",
          "--grid-mode",
          "--fps"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--mode": "",
      "--input": {
        "help": "Path to .nc 3D var or 3D .npy stack (for heatmap/contour/vector)",
        "path_arg": true,
        "type": "path"
      },
      "--inputs": {
        "help": "Multiple inputs for batch animations",
        "path_arg": true,
        "type": "path"
      },
      "--var": "NetCDF variable name (heatmap/contour)",
      "--uvar": "NetCDF: U variable name (vector/particles mode)",
      "--vvar": "NetCDF: V variable name (vector/particles mode)",
      "--u": {
        "help": "Path to U .npy stack (vector/particles mode)",
        "path_arg": true,
        "type": "path"
      },
      "--v": {
        "help": "Path to V .npy stack (vector/particles mode)",
        "path_arg": true,
        "type": "path"
      },
      "--output-dir": {
        "help": "Directory to write frames",
        "path_arg": true,
        "type": "path"
      },
      "--manifest": {
        "help": "Optional manifest output path (JSON)",
        "path_arg": true,
        "type": "path"
      },
      "--cmap": "",
      "--levels": "Contour levels: count or comma-separated",
      "--vmin": "",
      "--vmax": "",
      "--basemap": {
        "help": "Path to background image",
        "path_arg": true,
        "type": "path"
      },
      "--extent": "west east south north",
      "--width": "",
      "--height": "",
      "--dpi": "",
      "--density": "Vector mode: arrow sampling density (0<d<=1)",
      "--scale": "Vector mode: quiver scale controlling arrow length",
      "--color": "Vector/particles color",
      "--colorbar": "Heatmap/contour: draw colorbar",
      "--label": "Heatmap/contour colorbar label",
      "--units": "Heatmap/contour units for colorbar",
      "--show-timestamp": "Overlay timestamps per frame if available",
      "--timestamps-csv": "CSV with one timestamp per line (overrides auto)",
      "--timestamp-loc": "Timestamp placement (axes-relative)",
      "--features": "Heatmap/contour: comma-separated features",
      "--map-type": "",
      "--tile-source": "Contextily tile source (when --map-type=tile)",
      "--tile-zoom": "",
      "--xarray-engine": "xarray engine for NetCDF inputs (e.g., netcdf4, h5netcdf, scipy)",
      "--no-coastline": "",
      "--no-borders": "",
      "--no-gridlines": "",
      "--seed": "Particles: seeding strategy",
      "--particles": "Particles: count for grid/random seeding",
      "--custom-seed": "Particles: CSV with lon,lat columns",
      "--dt": "Particles: integration step",
      "--steps-per-frame": "Particles: substeps per frame",
      "--size": "Particles: marker size",
      "--method": "Particles: integrator",
      "--crs": "Force input CRS for heatmap/contour/vector",
      "--reproject": "",
      "--to-video": "Optional: compose frames to MP4 using ffmpeg (single or per-input when using --inputs)",
      "--combine-to": "Optional: compose per-input videos into a single MP4 grid",
      "--grid-cols": "Grid columns for --combine-to (default 2)",
      "--grid-mode": "Composition mode for --combine-to. 'grid' uses ffmpeg xstack (inputs must share the same width/height); if sizes differ, pre-scale inputs or use '--grid-mode hstack' to compose horizontally.",
      "--fps": "Frames per second for video composition"
    }
  },
  "visualize compose-video": {
    "description": "datavizhub visualize compose-video",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--frames",
          "--output",
          "--basemap",
          "--fps"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--frames": {
        "help": "Directory containing frame_*.png files",
        "path_arg": true,
        "type": "path"
      },
      "--output": {
        "help": "Output MP4 path",
        "path_arg": true,
        "type": "path"
      },
      "--basemap": {
        "help": "Optional background image to overlay under frames",
        "path_arg": true,
        "type": "path"
      },
      "--fps": ""
    }
  },
  "visualize interactive": {
    "description": "datavizhub visualize interactive",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--var",
          "--mode",
          "--engine",
          "--output",
          "--extent",
          "--cmap",
          "--features",
          "--no-coastline",
          "--no-borders",
          "--no-gridlines",
          "--colorbar",
          "--label",
          "--units",
          "--timestamp",
          "--timestamp-loc",
          "--tiles",
          "--zoom",
          "--attribution",
          "--wms-url",
          "--wms-layers",
          "--wms-format",
          "--wms-transparent",
          "--layer-control",
          "--width",
          "--height",
          "--crs",
          "--reproject",
          "--time-column",
          "--period",
          "--transition-ms",
          "--uvar",
          "--vvar",
          "--u",
          "--v",
          "--density",
          "--scale",
          "--color",
          "--streamlines"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Path to .npy/.nc/.csv input",
        "path_arg": true,
        "type": "path"
      },
      "--var": "NetCDF variable name (for .nc inputs)",
      "--mode": "",
      "--engine": "",
      "--output": {
        "help": "Output HTML path",
        "path_arg": true,
        "type": "path"
      },
      "--extent": "",
      "--cmap": "",
      "--features": "Heatmap/contour only: features (may be ignored depending on engine)",
      "--no-coastline": "",
      "--no-borders": "",
      "--no-gridlines": "",
      "--colorbar": "",
      "--label": "",
      "--units": "",
      "--timestamp": "",
      "--timestamp-loc": "",
      "--tiles": "Folium: tile layer name/URL",
      "--zoom": "Folium: initial zoom",
      "--attribution": "Folium: attribution for custom tiles/WMS",
      "--wms-url": "Folium: WMS base URL",
      "--wms-layers": "Folium: WMS layer names",
      "--wms-format": "",
      "--wms-transparent": "",
      "--layer-control": "Add a layer control switcher",
      "--width": "Plotly: width",
      "--height": "Plotly: height",
      "--crs": "Force input CRS",
      "--reproject": "",
      "--time-column": "CSV points: column containing ISO8601 time strings",
      "--period": "TimeDimension period (e.g., P1D)",
      "--transition-ms": "TimeDimension transition time (ms)",
      "--uvar": "NetCDF: U variable name (vector mode)",
      "--vvar": "NetCDF: V variable name (vector mode)",
      "--u": {
        "help": "Path to U .npy array (vector mode)",
        "path_arg": true,
        "type": "path"
      },
      "--v": {
        "help": "Path to V .npy array (vector mode)",
        "path_arg": true,
        "type": "path"
      },
      "--density": "Vector: arrow sampling density (0<d<=1)",
      "--scale": "Vector: arrow length scale in degrees",
      "--color": "Vector: arrow/line color",
      "--streamlines": "Vector: render streamlines image overlay"
    }
  },
  "decimate local": {
    "description": "datavizhub decimate local",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Input path or '-' for stdin",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "decimate s3": {
    "description": "datavizhub decimate s3",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--url",
          "--bucket",
          "--key"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Input path or '-' for stdin",
        "path_arg": true,
        "type": "path"
      },
      "--url": "Full URL s3://bucket/key",
      "--bucket": "Bucket name",
      "--key": "Object key (when using --bucket)"
    }
  },
  "decimate ftp": {
    "description": "datavizhub decimate ftp",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Input path or '-' for stdin",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "decimate post": {
    "description": "datavizhub decimate post",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--content-type"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Input path or '-' for stdin",
        "path_arg": true,
        "type": "path"
      },
      "--content-type": "Content-Type header"
    }
  },
  "decimate vimeo": {
    "description": "datavizhub decimate vimeo",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input",
          "--name",
          "--description",
          "--replace-uri"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input": {
        "help": "Input path or '-' for stdin",
        "path_arg": true,
        "type": "path"
      },
      "--name": "Video title",
      "--description": "Video description",
      "--replace-uri": "Replace existing video at this Vimeo URI"
    }
  },
  "transform metadata": {
    "description": "datavizhub transform metadata",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--frames-dir",
          "--pattern",
          "--datetime-format",
          "--period-seconds",
          "--output"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--frames-dir": {
        "help": "Directory containing frames",
        "path_arg": true,
        "type": "path"
      },
      "--pattern": "Regex filter for frame filenames",
      "--datetime-format": "Datetime format used in filenames (e.g., %Y%m%d%H%M%S)",
      "--period-seconds": "Expected cadence to compute missing frames",
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "transform enrich-metadata": {
    "description": "datavizhub transform enrich-metadata",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--frames-meta",
          "--dataset-id",
          "--vimeo-uri",
          "--read-vimeo-uri",
          "--output"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--frames-meta": {
        "help": "Path to frames metadata JSON",
        "path_arg": true,
        "type": "path"
      },
      "--dataset-id": "Dataset identifier to embed",
      "--vimeo-uri": "Vimeo video URI to embed in metadata",
      "--read-vimeo-uri": "Read Vimeo URI from stdin (first line)",
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "transform update-dataset-json": {
    "description": "datavizhub transform update-dataset-json",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--input-url",
          "--input-file",
          "--dataset-id",
          "--meta",
          "--read-meta-stdin",
          "--start",
          "--end",
          "--vimeo-uri",
          "--no-set-data-link",
          "--output"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--input-url": "HTTP(S) or s3:// URL of dataset.json",
      "--input-file": {
        "help": "Local dataset.json path",
        "path_arg": true,
        "type": "path"
      },
      "--dataset-id": "Dataset id to update",
      "--meta": {
        "help": "Path to metadata JSON containing start_datetime/end_datetime/vimeo_uri",
        "path_arg": true,
        "type": "path"
      },
      "--read-meta-stdin": {
        "help": "Read metadata JSON from stdin",
        "type": "str",
        "default": false
      },
      "--start": "Explicit startTime override (ISO)",
      "--end": "Explicit endTime override (ISO)",
      "--vimeo-uri": "Explicit Vimeo URI (e.g., /videos/12345)",
      "--no-set-data-link": {
        "help": "Do not update dataLink from Vimeo URI",
        "type": "str",
        "default": false
      },
      "--output": {
        "help": "Output path or '-' for stdout",
        "path_arg": true,
        "type": "path"
      }
    }
  },
  "run": {
    "description": "datavizhub run",
    "doc": "",
    "epilog": "",
    "groups": [
      {
        "title": "options",
        "options": [
          "--help",
          "--set",
          "--print-argv",
          "--print-argv-format",
          "--dry-run",
          "--continue-on-error",
          "--start",
          "--end",
          "--only",
          "--verbose",
          "--quiet",
          "--strict-env"
        ]
      }
    ],
    "options": {
      "--help": "show this help message and exit",
      "--set": "Override key=value in args across stages",
      "--print-argv": {
        "help": "Print argv per stage before running",
        "type": "str",
        "default": false
      },
      "--print-argv-format": "",
      "--dry-run": {
        "help": "Only print argv; do not execute stages",
        "type": "str",
        "default": false
      },
      "--continue-on-error": {
        "help": "Continue executing remaining stages even if one fails",
        "type": "str",
        "default": false
      },
      "--start": "1-based index of first stage to run",
      "--end": "1-based index of last stage to run",
      "--only": "Run only stages matching this alias (acquire/process/visualize/decimate)",
      "--verbose": {
        "help": "Verbose runner output (prints stage headings)",
        "type": "str",
        "default": false
      },
      "--quiet": {
        "help": "Suppress runner messages when possible",
        "type": "str",
        "default": false
      },
      "--strict-env": {
        "help": "Fail if ${VAR} placeholders are not set in environment",
        "type": "str",
        "default": false
      }
    }
  }
}
